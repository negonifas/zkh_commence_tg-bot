from aiogram.fsm.state import StatesGroup, State


# Используется в handlers/violation.py
violations_list_extended = [
    "Заложено окно - Ликвидирован предусмотренный проектом дома оконный проем с изменением внешнего облика фасада дома.",
    "Изменен размер окна - Изменен предусмотренный проектом размер оконного проема с изменением внешнего облика фасада дома.",
    "Изменен цвет оконной рамы - Изменен предусмотренный проектом цвет оконной рамы с изменением внешнего облика фасада дома.",
    "Изменена раскладка окна - Изменен предусмотренный проектом архитектурный рисунок оконного блока с изменением внешнего облика фасада дома.",
    "Сооружен козырек балкона - Обустроен не предусмотренный проектом балконный козырек с изменением внешнего облика фасада дома.",
    "Сооружен балкон - Обустроен не предусмотренный проектом балкон с изменением внешнего облика фасада дома.",
    "Увеличена площадь балкона - Увеличена сверх предусмотренной проектом площадь балкона с изменением внешнего облика фасада дома.",
    "Остекление балкона - Обустроено не предусмотренное проектом остекление балкона с изменением внешнего облика фасада дома.",
    "Использование балкона - Балкон используется не по назначению.",
    "Объединение балкона с квартирой - Произведено объединение балкона с внутренними помещениями квартиры.",
    "Удалено ограждение балкона - Демонтировано предусмотренное проектом ограждение балкона с изменением внешнего облика фасада дома.",
    "Изменен фартук балкона - Изменен предусмотренный проектом фартук балкона с изменением внешнего облика фасада дома.",
    "Сооружена лоджия - Обустроена не предусмотренная проектом лоджия с изменением внешнего облика фасада дома.",
    "Увеличена площадь лоджии - Увеличена сверх предусмотренной проектом площадь лоджии с изменением внешнего облика фасада дома.",
    "Остекление лоджии - Обустроено не предусмотренное проектом остекление лоджии с изменением внешнего облика фасада дома.",
    "Использование лоджии - Лоджия используется не по назначению.",
    "Объединение лоджии с квартирой - Произведено объединение лоджии с внутренними помещениями квартиры.",
    "Удалено ограждение лоджии - Демонтировано предусмотренное проектом ограждение лоджии с изменением внешнего облика фасада дома.",
    "Изменен фартук лоджии - Изменен предусмотренный проектом фартук лоджии с изменением внешнего облика фасада дома.",
    "Спутниковая антенна - На фасаде оборудована не предусмотренная проектом спутниковая антенна с изменением внешнего облика фасада дома.",
    "Телевизионная антенна - На фасаде оборудована не предусмотренная проектом телевизионная антенна с изменением внешнего облика фасада дома.",
    "Видеокамера на фасаде - На фасаде оборудована не предусмотренная проектом видеокамера с изменением внешнего облика фасада дома.",
    "Кондиционер - На фасаде оборудован не предусмотренный проектом внешний блок кондиционера с изменением внешнего облика фасада дома.",
    "Вентиляционная установка - На фасаде оборудована не предусмотренная проектом вентиляционная установка с изменением внешнего облика фасада дома.",
    "Отверстие в фасаде - В фасаде оборудовано не предусмотренное проектом отверстие с изменением внешнего облика фасада дома.",
    "Тамбурная дверь - На эвакуационных путях установлена не предусмотренная проектом тамбурная дверь.",
    "Тамбурная решетка - На эвакуационных путях установлена не предусмотренная проектом тамбурная дверь-решетка.",
    "Вынос квартирной двери - Площадь квартиры увеличена за счет использования общего имущества.",
    "Замок на двери к лестнице - На двери лестницы установлено запорное устройство, препятствующее доступу.",
    "Остекление балкона лестницы - На балконе лестницы оборудовано не предусмотренное проектом остекление, с изменением внешнего облика фасада дома.",
    "Видеокамера в подъезде - В подъезде оборудована не предусмотренная проектом видеокамера с использованием общего имущества."
]

# Используется в app/handlers/user_reg.py и handlers/violation.py
# Это старая версия класса до V2_2025
# class ViolationFSM(StatesGroup):
#     dashboard = State()
#     main_menu = State()
#     details_menu = State()
#     confirm = State()
#     address = State()
#     review = State()
#     photo = State()
#     final = State()
#     useful_info = State()
class ViolationFSM(StatesGroup):
    dashboard = State()
    address = State()
    entrance = State()
    floor = State()
    main_menu = State()
    details_menu = State()
    final_photo_state = State()
    edit_floor = State()
    edit_entrance = State()

    confirm = State()
    review = State()
    final = State()
    useful_info = State()

# Используется в app/pagination/go_paginator.py
class ViolationPaginatorEditorStates(StatesGroup):
    list = State()
    details = State()
    confirm = State()
