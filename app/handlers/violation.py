import requests
import io
import os
import smtplib
import pytz

from aiogram.types import CallbackQuery
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from app.functions.cloud import pdf_to_cloud
from app.kb.violation_kb import (build_main_kb, build_violation_kb,
                                 ViolationCbData, VIOLATIONS, build_confirm_kb,
                                 build_review_kb, is_text_without_emoji, build_review_address_kb,
                                 build_edit_main_data_kb, back_to_button, back_to_main_menu_button,
                                 )
from aiogram.types import Message
from PIL import Image
from app.functions.UFO_pdf import (delete_temp_directory,
                                   generate_qr_code,
                                   create_pdf_body,
                                   get_full_violation_composition, )
from aiogram.utils.chat_action import ChatActionSender
from app.db.postgresql import select_user_id, add_violation, number_of_violations
from app.functions.send_email import send_email
from app.kb.user_reg_kb import reg_users_dashboard
from app.kb.one_back_button import inline_back_to_button
from datetime import datetime
from loguru import logger
from app.etc.data import violations_list_extended, ViolationFSM
from app.functions.address import address_cleaner

router = Router(name=__name__)


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ —Å–æ–±—ã—Ç–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ "ViolationFSM.dashboard" –∫—Ä–æ–º–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
@router.message(ViolationFSM.dashboard)
async def wrong_input(message: Message, state: FSMContext):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –Ω–∞–∂–∞—Ç–∏–µ–º –∫–Ω–æ–ø–∫–∏
    wrong_input_after_dashboard_msg_id = await message.answer(
        text="–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.",
        reply_markup=reg_users_dashboard()
    )
    logger.error(f"TG ID: {message.from_user.id}, —Ç—É—Ç –Ω–∞–¥–æ –±—ã–ª–æ –∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–ù–∞—Ä—É—à–µ–Ω–∏–µ, –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'\n"
                 f"FSM: {await state.get_state()}")


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—Ä—É—à–µ–Ω–∏–µ ‚õë"
# –ú–µ–Ω—è–µ–º —Å–æ—Ç–æ—è–Ω–∏–µ —Å "ViolationFSM.dashboard" –Ω–∞ "ViolationFSM.address"
@router.callback_query(F.data == "dashboard")
async def main_menu(callback: CallbackQuery, state: FSMContext):
    # await state.clear()
    # –ó–∞—á–µ–º —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è?
    # logger.debug(f"'PRINT': –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 1: {(await number_of_violations(callback.from_user.id))[0]}")
    if (await number_of_violations(callback.from_user.id))[0] <= 150:
        start_violation_msg = await callback.message.edit_text(
            text=f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π, –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞—Ä—É—à–µ–Ω–∏—è\n"
                 f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                 f"–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥. –°–∞—Ñ–æ–Ω–æ–≤–æ, —É–ª. –°—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, –¥. 28, –∫–æ—Ä–ø. 2, –∫–≤.155",
            reply_markup=back_to_main_menu_button(),
        )
        await state.update_data(
            start_violation_msg_id=start_violation_msg.message_id,
            current_chat_id=start_violation_msg.chat.id
        )
        await callback.answer()
        await state.set_state(ViolationFSM.address)
        logger.debug(f"TG ID: {callback.from_user.id}, –í–≤–æ–¥–∏—Ç –∞–¥—Ä–µ—Å –¥–ª—è –Ω–∞—Ä—É—à–µ–Ω–∏—è ===>\n"
                     f"FSM: {await state.get_state()}")
    else:
        await callback.message.edit_text(
            text=f"–£ –≤–∞—Å –±–æ–ª—å—à–µ 15 –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π.\n"
                 f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ.\n",
            reply_markup=inline_back_to_button(callback_data="start_again", ),
        )
        logger.error(f"TG ID: {callback.from_user.id}, –±–æ–ª—å—à–µ 15 –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π.\n"
                     f"FSM: {await state.get_state()}")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ "–∞–¥—Ä–µ—Å"
# –ó–∞–±–∏—Ä–∞–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
@router.message(ViolationFSM.address)
async def handle_address(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if not is_text_without_emoji(message.text) or message.photo or message.document:
        await message.answer(
            text=f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –±–µ–∑ —ç–º–æ–¥–∑–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
                 f"–í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π, –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–∞—Ä—É—à–µ–Ω–∏—è\n"
                 f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                 f"–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å, –≥. –°–∞—Ñ–æ–Ω–æ–≤–æ, —É–ª. –°—Ç—Ä–æ–∏—Ç–µ–ª–µ–π, –¥. 28, –∫–æ—Ä–ø. 2, –∫–≤.155",
        )
        logger.error(
            f"TG ID: {message.from_user.id}, wrong_input –Ω–∞ –≤–≤–æ–¥–µ –∞–¥—Ä–µ—Å–∞\n"
            f"FSM: {await state.get_state()}"
        )
        return

    address = await address_cleaner(message.text)
    if not address:
        await message.answer(
            text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ.",
        )
        logger.error(
            f"TG ID: {message.from_user.id}, wrong_input –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∞–¥—Ä–µ—Å\n"
            f"FSM: {await state.get_state()}"
        )
    else:
        await message.answer(
            text=f"–í—ã –≤–≤–µ–ª–∏ –∞–¥—Ä–µ—Å: {address}\n"
                 f"–í—Å–µ –≤–µ—Ä–Ω–æ? –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ –Ω–æ–≤–æ–π.",
            reply_markup=build_review_address_kb(),
        )
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(address=address)
        logger.debug(
            f"TG ID: {message.from_user.id}, –≤–≤–µ–¥–µ–Ω –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∞–¥—Ä–µ—Å: {address}\n"
            f"–î–≤–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ '–Ω–∞ –≥–ª–∞–≤–Ω—É—é' ===>\n"
            f"FSM: {await state.get_state()}"
        )


# –¢—É—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞
@router.callback_query(F.data == "confirm_address")
async def handle_only_digits(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(ViolationFSM.entrance)
    await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞\n",
                                     reply_markup=back_to_main_menu_button())
    logger.debug(f"TG ID: {callback.from_user.id}\n"
                 f"–ù–∞–∂–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–¥—Ä–µ—Å –∏ —Ç–µ–ø–µ—Ä—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞ ===>\n"
                 f"FSM: {await state.get_state()}")


# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞
# –í—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ —Å –≤–∏–¥–∞–º–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π
@router.message(ViolationFSM.entrance, F.text.isdigit())
async def handle_entrance_only_digits(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    entrance = message.text
    await state.update_data(entrance=entrance)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(
        text="–ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–∂–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ?\n",
        reply_markup=back_to_button(),
    )

    await state.set_state(ViolationFSM.floor)
    logger.debug(f"TG ID: {message.from_user.id}, —Å–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ–¥—ä–µ–∑–¥: {entrance}\n"
                 f"–°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–∂–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ ===>\n"
                 f"FSM: {await state.get_state()}")
@router.message(ViolationFSM.entrance)
async def handle_entrance_only_digits(message: types.Message, state: FSMContext):
    await message.answer(
        text=f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n"
             f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞\n",
        reply_markup=back_to_main_menu_button(),
    )
    logger.error(f"TG ID: {message.from_user.id}, wrong_input\n"
                 f"FSM: {await state.get_state()}")


# –°–∫–∞—Ä–º–ª–∏–≤–∞–µ–º ‚Ññ —ç—Ç–∞–∂–∞, –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏ —Å –Ω—É—Ä—É—à–µ–Ω–∏—è–º–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
@router.message(ViolationFSM.floor, F.text.isdigit())
async def handle_floor_only_digits(message: types.Message, state: FSMContext):
    floor = message.text
    await state.update_data(floor=floor)
    data = await state.get_data()
    address, entrance, floor = data.get("address"), data.get("entrance"), data.get("floor")
    await message.answer(
        text=f"–î–ª—è –æ–±—ä–µ–∫—Ç:\n{address}, –ø–æ–¥—ä–µ–∑–¥: {entrance}, —ç—Ç–∞–∂: {floor}\n"
             f"–ö–∞–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ? üëá",
        reply_markup=build_main_kb(),
    )

    logger.debug(f"TG ID: {message.from_user.id}, —Å–æ—Ö—Ä–∞–Ω—ë–Ω —ç—Ç–∞–∂: {floor}\n"
                 f"–ü–æ–∫–∞–∑–∞–ª–∏ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π ===>\n"
                 f"FSM: {await state.get_state()}")
    await state.set_state(ViolationFSM.main_menu)
@router.message(ViolationFSM.floor)
async def wrong_input(message: types.Message, state: FSMContext):
    await message.answer(
        text=f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n"
             f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞",
    )
    logger.error(f"TG ID: {message.from_user.id}, wrong_input\n"
                 f"FSM: {await state.get_state()}"
                 )


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
@router.callback_query(F.data == "start_again")
async def start_again(callback_query: CallbackQuery, state: FSMContext):
    start_again_violation_msg = await callback_query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–∏ÃÜ—Å—Ç–≤–∏–µ üëá\n\n",
        reply_markup=reg_users_dashboard(),
    )


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫—Ä–æ–º–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@router.message(ViolationFSM.main_menu)
async def wrong_input(message: Message, state: FSMContext):
    await message.answer(
        text="–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.",
        reply_markup=build_main_kb()
    )
    logger.error(f"TG ID: {message.from_user.id}, wrong_input\n"
                 f"FSM: {await state.get_state()}")


@router.callback_query(ViolationCbData.filter())
async def handle_violation(callback: CallbackQuery, callback_data: ViolationCbData, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è VIOLATIONS
    area_text = VIOLATIONS.get(callback_data.area, {})
    violation_data = VIOLATIONS[callback_data.area].get(callback_data.detail, {})
    detail_text = violation_data.get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ")
    violation_url = violation_data.get("url", "")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(
        violation_type=detail_text,
        main_category=callback_data.area,
        violation_url=violation_url
    )

    data = await state.get_data()
    address, entrance, floor = data.get("address"), data.get("entrance"), data.get("floor")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = (
        f"–î–ª—è –æ–±—ä–µ–∫—Ç–∞:\n{address}, –ø–æ–¥—ä–µ–∑–¥: {entrance}, —ç—Ç–∞–∂: {floor}\n"
        f"–í—ã–±—Ä–∞–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {detail_text}. \n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è, –∞ –≤ –ø–æ–¥–ø–∏—Å–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã."
    )
    await callback.message.edit_text(text=text,
                                     reply_markup=back_to_button(),
                                     )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    await state.set_state(ViolationFSM.final_photo_state)

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    logger.debug(
        f"TG ID: {callback.from_user.id}\n"
        f"–î–ª—è –æ–±—ä–µ–∫—Ç–∞:\n{address}, –ø–æ–¥—ä–µ–∑–¥: {entrance}, —ç—Ç–∞–∂: {floor}\n–í—ã–±—Ä–∞–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: {detail_text}\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è, –∞ –≤ –ø–æ–¥–ø–∏—Å–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã ===>\n"
        f"FSM: {await state.get_state()}"
    )


@router.message(ViolationFSM.final_photo_state, F.photo & F.caption)
# @router.message(F.photo & F.caption)
# @router.callback_query(F.data == "confirm")
async def process_photo(message: types.Message, state: FSMContext):
    # –°–æ–µ–¥–∏–Ω—è–µ–º—Å—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (email)
    user_data = await select_user_id(message.from_user.id)
    user_email = user_data[2]
    # print(user_email)
    logger.debug(f"'PRINT': User email: {user_email}")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ÃÜ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # caption = ", ".join(message.caption.split())
    caption = message.caption.split()
    caption = ", ".join(caption)
    await state.update_data(photo_caption=caption)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ç–æ
    file_id = message.photo[-1].file_id
    URI_INFO = f"https://api.telegram.org/bot{message.bot.token}/getFile?file_id={file_id}"
    resp = requests.get(URI_INFO)
    img_path = resp.json()['result']['file_path']
    URI = f"https://api.telegram.org/file/bot{message.bot.token}/"
    URI_full = f"https://api.telegram.org/file/bot{message.bot.token}/{img_path}"
    img = requests.get(URI_full).content
    image = Image.open(io.BytesIO(img))

    # print(f"Current state data in process_photo: {data}")
    # logger.debug(f"'PRINT': Current state data in process_photo: {data}")

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö / –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    pdf_title = "–£–í–ï–î–û–ú–õ–ï–ù–ò–ï!"
    main_menu_text = data.get("main_category", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    violation_details = data.get("violation_type", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    floor = data.get("floor", "–ù–µ —É–∫–∞–∑–∞–Ω")
    entrance = data.get("entrance", "–ù–µ —É–∫–∞–∑–∞–Ω")

    logger.debug(f"\nTG ID: {message.from_user.id}\n"
                 f"—ç—Ç–∞–∂: {data.get('floor', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                 f"–ø–æ–¥—ä–µ–∑–¥: {data.get('entrance', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n")

    # print(f"Violation details: {violation_details}")
    # logger.debug(f"'PRINT': Violation details: {violation_details}")
    violation_complete_details = get_full_violation_composition(
        violations_list_extended,
        violation_details, )
    # print(f"–¢–µ–ø–µ—Ä—å Violation details: {violation_details}")
    # logger.debug(f"'PRINT': –¢–µ–ø–µ—Ä—å Violation details: {violation_details}")
    # address = data.get("address", "–ù–µ —É–∫–∞–∑–∞–Ω")
    address = f"{data['address']}, –∫–≤–∞—Ä—Ç–∏—Ä–∞ {caption}"
    violation_url = data.get("violation_url", "–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è URL")
    font_path = "Roboto-Regular.ttf"
    font_path_bold = "times_bold.ttf"
    font_path_regular = "times_regular.ttf"
    logo_img = "revizor_logo-original-from-template.jpg"

    # # –ê–Ω–∏–º–∞—Ü–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–∂–∏–¥–∞–Ω–∏–∏
    async with ChatActionSender.upload_document(bot=message.bot, chat_id=message.chat.id):
        waiting_message = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        qr_code_img = generate_qr_code(violation_url)
        pdf_file, temp_dir = create_pdf_body(
            message.from_user.id,
            pdf_title,
            main_menu_text,
            violation_complete_details,
            address,
            image,
            qr_code_img,
            font_path_regular,
            font_path_bold,
            logo_img,
        )
        SMTP_SERVER = 'smtp.mail.ru'
        SMTP_PORT = 587
        SMTP_USER = os.getenv('SMTP_USER')
        SMTP_PASSWORD = os.getenv('SMTP_PASSWORD')

        moscow_timezone = pytz.timezone('Europe/Moscow')
        current_time = datetime.now(moscow_timezone).strftime("%d-%m-%Y_%H:%M")

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            new_violation_id = await add_violation(message.from_user.id,
                                                   main_menu_text, violation_details,
                                                   address, floor, entrance,)
        except Exception as e:
            logger.error(f"TG ID: {message.from_user.id}, –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}"
                         f"FSM: {await state.get_state()}")
        # print(f"–ù–æ–≤—ã–π ID –Ω–∞—Ä—É—à–µ–Ω–∏—è {new_violation_id}\n–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {message.from_user.id}")
        # logger.debug(f"–ù–æ–≤—ã–π ID –Ω–∞—Ä—É—à–µ–Ω–∏—è {new_violation_id}\n–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {message.from_user.id}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –Ω–∞ email
        try:
            send_email(
                message.from_user.id,
                subject=f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ - "{violation_details}", –ø–æ –∞–¥—Ä–µ—Å—É {address}',
                from_name="–û–ó–ü–ü –†–µ–≤–∏–∑–æ—Ä –ñ–ö–•",

                body='–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –Ω–∞—Ä—É—à–µ–Ω–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.',
                to_email=user_email,
                file_path=pdf_file,
                smtp_server=SMTP_SERVER,
                smtp_port=SMTP_PORT,
                smtp_user=SMTP_USER,
                smtp_password=SMTP_PASSWORD,
            )
        except smtplib.SMTPRecipientsRefused as e:
            # print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {e}")
            logger.error(f"TG ID: {message.from_user.id}, –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è—é PDF –≤ G-–æ–±–ª–∞–∫–æ
        try:
            pdf_to_cloud(message.from_user.id,
                         pdf_file,
                         f"{message.from_user.id} - {message.from_user.username}",
                         f"ViolationID: {new_violation_id} - PDF - Date: {current_time}")
        except Exception as e:
            logger.error(f"TG ID: {message.from_user.id}, –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF –≤ G-–æ–±–ª–∞–∫–æ: {e}"
                         f"FSM: {await state.get_state()}")

        await waiting_message.delete()

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    delete_temp_directory(message.from_user.id, temp_dir)

    # await message.answer_photo(photo=message.photo[-1].file_id, caption='–§–æ—Ç–æ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏')
    await message.answer(text=f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ {main_menu_text}, {violation_details}, {address}\n"
                              f"–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {user_email}\n"
                              f"Ôºë) –†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –µ–≥–æ –Ω–∞ –¥–≤–µ—Ä–∏ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è.\n"
                              f"Ôºí) –°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ.\n"
                              f"Ôºì) –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –±–æ—Ç–µ\n"
                              f"–Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É 'üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'.\n\n"
                              f"–ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å üëá",
                         # reply_markup=reg_users_dashboard(),
                         reply_markup=build_edit_main_data_kb(),
                         )
    logger.debug(f"TG ID: {message.from_user.id}, –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {user_email}\n"
                 f"–ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å ===>\n"
                 f"FSM: {await state.get_state()}")
    # # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    # await state.clear()
@router.message(ViolationFSM.final_photo_state)
async def handle_incorrect_photo(message: types.Message, state: FSMContext):
    await message.reply(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ.\n"
                        f"–í –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã.")
    logger.error(f"TG ID: {message.from_user.id}, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ."
                 f"FSM: {await state.get_state()}")


@router.callback_query(F.data == "useful_info")
async def userful_info_callback(callback_query: CallbackQuery, state: FSMContext):
    # await state.clear()
    try:
        await callback_query.message.edit_text(
            text=f"üìì –û—Ñ–æ—Ä–º–ª–µ–Ω–æ: {(await number_of_violations(callback_query.from_user.id))[2]}\n"
                 f"üìå –†–∞–∑–º–µ—â–µ–Ω–Ω–æ: {(await number_of_violations(callback_query.from_user.id))[1]}\n"
                 f"üí∞ –í—ã–ø–ª–∞—á–µ–Ω–æ: 0\n\n"
                 f"| <a href='https://t.me/Terranova495'>‚ÅâÔ∏è –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</a> "
                 f"| <a href='https://t.me/Terranova495'>üí∏ –û—Ñ–æ—Ä–º–∏—Ç—å –≤—ã–ø–ª–∞—Ç—É</a> "
                 f"| <a href='https://t.me/revizorgh_fixchat'>üìú –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a> |",
            reply_markup=inline_back_to_button(callback_data="start_again", ),
            disable_web_page_preview=True,
        )
    except Exception as e:
        # print(e)
        logger.error(f"TG ID: {callback_query.from_user.id}, Error: {e}"
                     f"FSM: {await state.get_state()}")


@router.callback_query(F.data == "edit_entrance")
async def handle_another_entrance(callback: CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –ø–æ–¥—ä–µ–∑–¥–∞
    await state.set_state(ViolationFSM.edit_entrance)
    await callback.message.edit_text(
        text="üëá –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞ üëá",
    )
    logger.debug(f"TG ID: {callback.from_user.id}, –≤–≤–æ–¥–∏—Ç '–î—Ä—É–≥–æ–π –ø–æ–¥—ä–µ–∑–¥' ===>\n"
                 f"FSM: {await state.get_state()}")

@router.message(ViolationFSM.edit_entrance, F.text.isdigit())
async def handle_edit_entrance(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    entrance = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(entrance=entrance)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(
        text="–û–ø—è—Ç—å —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–∂–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–µ?",
        reply_markup=back_to_button(),
    )

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —ç—Ç–∞–∂–∞, —Å–∞–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—à–µ
    await state.set_state(ViolationFSM.floor)

    logger.debug(f"TG ID: {message.from_user.id}, —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–æ–≤—ã–π –ø–æ–¥—ä–µ–∑–¥: {entrance}\n"
                 f"–ó–∞–ø—Ä–æ—Å–∏–ª –Ω–æ–≤—ã–π —ç—Ç–∞–∂ ===>\n"
                 f"FSM: {await state.get_state()}")
@router.message(ViolationFSM.edit_entrance)
async def wrong_input(message: Message, state: FSMContext):
    await message.answer(text=f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n"
                              f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–¥—ä–µ–∑–¥–∞\n",
                         reply_markup=back_to_main_menu_button(),
                         )
    logger.error(f"TG ID: {message.from_user.id}, –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã."
                 f"FSM: {await state.get_state()}")


@router.callback_query(F.data == "edit_floor")
async def handle_another_floor(callback: CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —ç—Ç–∞–∂–∞
    await state.set_state(ViolationFSM.edit_floor)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.edit_text(
        text="üëá –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞ üëá",
        reply_markup=back_to_button(),
    )

    logger.debug(f"TG ID: {callback.from_user.id}, –≤–≤–æ–¥–∏—Ç '–î—Ä—É–≥–æ–π —ç—Ç–∞–∂' ===>\n"
                 f"FSM: {await state.get_state()}")

@router.message(ViolationFSM.edit_floor, F.text.isdigit())
async def handle_edit_floor(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    floor = message.text
    await state.update_data(floor=floor)

    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    await state.set_state(ViolationFSM.final_photo_state)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    address, entrance = data.get("address"), data.get("entrance")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text = (
        f"–î–ª—è –æ–±—ä–µ–∫—Ç–∞:\n{address}, –ø–æ–¥—ä–µ–∑–¥: {entrance}, —ç—Ç–∞–∂: {floor}\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è, –∞ –≤ –ø–æ–¥–ø–∏—Å–∏ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã."
    )
    await message.answer(text=text,
                         reply_markup=back_to_button(),
                         )

    logger.debug(f"TG ID: {message.from_user.id}, —Å–æ—Ö—Ä–∞–Ω—ë–Ω –Ω–æ–≤—ã–π —ç—Ç–∞–∂: {floor}\n"
                 f"–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ ===>\n"
                 f"FSM: {await state.get_state()}")
@router.message(ViolationFSM.edit_floor)
async def wrong_input(message: Message, state: FSMContext):
    await message.answer(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n"
                         f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —ç—Ç–∞–∂–∞")
    logger.error(f"TG ID: {message.from_user.id}, –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã."
                 f"FSM: {await state.get_state()}")


@router.callback_query(F.data == "edit_violation")
async def handle_another_violation(callback: CallbackQuery, state: FSMContext):
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
    await state.set_state(ViolationFSM.main_menu)
    await callback.message.edit_text(
        text="üëá –ì–¥–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ? üëá",
        reply_markup=build_main_kb(),
    )
    logger.debug(f"TG ID: {callback.from_user.id}, –≤—ã–±–∏—Ä–∞–µ—Ç '–î—Ä—É–≥–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ' ===>\n"
                 f"FSM: {await state.get_state()}")


# ============================================================================================================

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –í–µ—Ä–Ω—ë—Ç –∫ "üëá –ì–¥–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ? üëá"
@router.callback_query(F.data == "reset")
async def reset_violation(callback_query: CallbackQuery, state: FSMContext) -> None:
    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.set_state(ViolationFSM.main_menu)
    await callback_query.message.edit_text(
        text="üëá –ì–¥–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ? üëá",
        reply_markup=build_main_kb(),
    )
    logger.debug(f"TG ID: {callback_query.from_user.id}, –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –≤–µ—Ä–Ω—É–ª—Å—è –≤ root\n"
                 f"FSM: {await state.get_state()}")


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Å–æ–±—ã—Ç–∏ –∫—Ä–æ–º–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ViolationFSM.details_menu
@router.message(ViolationFSM.details_menu)
async def handle_invalid_message_in_details(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∫–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏—è –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞
    data = await state.get_data()
    selected_area = data.get("selected_area")

    if not selected_area or selected_area not in VIOLATIONS:
        await message.answer(
            text="–û—à–∏–±–∫–∞ –≤ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ.",
            reply_markup=build_main_kb()
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
    await message.answer(
        text="–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è.",
        reply_markup=build_violation_kb(selected_area)
    )
    logger.error(f"TG ID: {message.from_user.id}, wrong_input\n"
                 f"FSM: {await state.get_state()}")


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Å–æ–±—ã—Ç–∏ –∫—Ä–æ–º–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ViolationFSM.confirm
@router.message(ViolationFSM.confirm)
async def handle_invalid_message_in_confirm(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    violation_type = data.get("violation_type")

    if not violation_type:
        await message.answer(
            text="–û—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=build_confirm_kb()
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏ —Å–Ω–æ–≤–∞ –≤—ã–≤–æ–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        text="–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
        reply_markup=build_confirm_kb()
    )
    logger.error(f"TG ID: {message.from_user.id}, wrong_input\n"
                 f"FSM: {await state.get_state()}")
