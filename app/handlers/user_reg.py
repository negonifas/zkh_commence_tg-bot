import re
import os

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, ReplyKeyboardRemove
from dotenv import load_dotenv
from loguru import logger
from app.db.postgresql import add_user, get_name_in_db
from app.kb.user_reg_kb import finish_reg_keyboard, reg_users_dashboard
from app.handlers.violation import ViolationFSM
from app.functions.message_deleter import delete_message_after_delay

router = Router(name=__name__)
load_dotenv()

EMAIL_REGEX = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$'
NAME_REGEX = r'^[A-Za-z–ê-–Ø–∞-—è–Å—ë\s-]+$'
PHONE_REGEX = r'^\+7\d{10}$'


class RegistrationState(StatesGroup):
    start = State()
    waiting_for_name = State()
    waiting_for_email = State()
    waiting_for_phone = State()
    confirm = State()


@router.message(Command(commands=["start"]))
async def cmd_start(message: Message, state: FSMContext):
    try:
        await message.bot.send_message(os.getenv('ADMIN_TG_ID'),
                                       text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id}\n"
                                            f"TG username: {message.from_user.username}\n"
                                            f"–ó–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
        logger.debug(f"TG ID: {message.from_user.id}, c–æ–æ–±—â–µ–Ω–∏–µ –æ '–°–¢–ê–†–¢–ï' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É.")
    except Exception as e:
        logger.error(f"TG ID: {message.from_user.id}, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    await state.clear()
    # # –•–æ–∑—è–π–∫–µ –Ω–∞ –∑–∞–º–µ—Ç–∫—É
    # print(f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {greeting_message.message_id}\n"
    #       f"ID —á–∞—Ç–∞: {greeting_message.chat.id}\n")
    greeting_message = await message.answer("–ë–æ—Ç –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å!",
                                            reply_markup=ReplyKeyboardRemove(),
                                            )
    # –£–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    await delete_message_after_delay(message.from_user.id, greeting_message, delay=5)

    user_name = await get_name_in_db(message.from_user.id)
    if user_name:
        msg = await message.answer(
            f"–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å <b>{user_name}</b> üôå\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reg_users_dashboard()
        )
        await state.update_data(registered_msg_id=msg.message_id)
        await state.set_state(ViolationFSM.dashboard)
        logger.debug(f"TG ID: {message.from_user.id}, —Ç–µ–∫—É—â–µ–µ FSM: {await state.get_state()}")
    else:
        await message.answer(f"–°–æ–æ–±—â–∏—Ç–µ –º–Ω–µ —Å–≤–æ—ë –∏–º—è üëá",
                             reply_markup=ReplyKeyboardRemove())
        await state.set_state(RegistrationState.waiting_for_name)
        logger.debug(f"TG ID: {message.from_user.id}, —Ç–µ–∫—É—â–µ–µ FSM: {await state.get_state()}")


# @router.message(Command(commands=["start"]))
# async def cmd_start(message: Message, state: FSMContext):
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω –ª–∏ /start –≤–ø–µ—Ä–≤—ã–µ –∏–ª–∏ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
#     data = await state.get_data()
#     success_reg_msg_id = data.get('success_reg_msg_id', None)
#
#     # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
#     user = await select_user_id(message.from_user.id)
#
#     if user:
#         # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
#         if success_reg_msg_id:
#             greeting_message = await message.answer(
#                 "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º –∑–∞–Ω–æ–≤–æ.",
#                 reply_markup=ReplyKeyboardRemove(),
#             )
#         else:
#             # –ò—Å—Ö–æ–¥–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
#             greeting_message = await message.answer(
#                 f"–†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å <b>{message.from_user.first_name}</b> üôå\n"
#                 f"–í–∞–º–∏ —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {await number_of_violations(message.from_user.id)}\n",
#                 reply_markup=ReplyKeyboardRemove(),
#             )
#
#         # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#         await message.answer(
#             text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
#             reply_markup=reg_users_dashboard()
#         )
#
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
#         await state.update_data(success_reg_msg_id=greeting_message.message_id)
#
#     else:
#         # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
#         await message.answer(
#             f"–ü—Ä–∏–≤–µ—Ç, –≤–∞—à Telegram ID: {message.from_user.id}\n"
#             f"–°–æ–æ–±—â–∏—Ç–µ –º–Ω–µ —Å–≤–æ—ë –∏–º—è üëá",
#             reply_markup=ReplyKeyboardRemove()
#         )
#         await state.set_state(RegistrationState.waiting_for_name)


@router.message(RegistrationState.waiting_for_name, F.text)
async def process_name(message: Message, state: FSMContext):
    name = message.text
    if re.match(NAME_REGEX, name):
        logger.debug(f"TG ID: {message.from_user.id}, –≤–≤–µ–¥–µ–Ω–æ –∏–º—è: {name}")
        await state.update_data(name=name)
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {name}! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email üëá")
        await state.set_state(RegistrationState.waiting_for_email)
        logger.debug(f"TG ID: {message.from_user.id}, —Ç–µ–∫—É—â–µ–µ FSM: {await state.get_state()}")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã).")
        logger.error(f"TG ID: {message.from_user.id}, –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")

@router.message(RegistrationState.waiting_for_name)
async def wrong_input(message: Message):
    logger.error(f"TG ID: {message.from_user.id}, –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.")
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã).")


@router.message(RegistrationState.waiting_for_email, F.text)
async def process_email(message: Message, state: FSMContext):
    email = message.text
    if re.match(EMAIL_REGEX, email):
        logger.debug(f"TG ID: {message.from_user.id}, –≤–≤–µ–¥–µ–Ω email: {email}")
        await state.update_data(email=email)
        await message.answer("Email –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890 üëá")
        await state.set_state(RegistrationState.waiting_for_phone)
        logger.debug(f"TG ID: {message.from_user.id}, —Ç–µ–∫—É—â–µ–µ FSM: {await state.get_state()}")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.")
        logger.error(f"TG ID: {message.from_user.id}, –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")

@router.message(RegistrationState.waiting_for_email)
async def wrong_input(message: Message):
    logger.error(f"TG ID: {message.from_user.id}, –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.")


@router.message(RegistrationState.waiting_for_phone, F.text)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text
    if re.match(PHONE_REGEX, phone):
        logger.debug(f"TG ID: {message.from_user.id}, –≤–≤–µ–¥–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")
        user_data = await state.get_data()
        await state.update_data(phone=phone)
        await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –ø—Ä–∏–Ω—è—Ç.\n"
                             "–¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üëá")
        await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                             f"–ò–º—è: {user_data['name']}\n"
                             f"Email: {user_data['email']}\n"
                             f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
                             f"–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\"\n"
                             f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\"",
                             reply_markup=finish_reg_keyboard,
                             )
        await state.set_state(RegistrationState.confirm)
        logger.debug(f"TG ID: {message.from_user.id}, —Ç–µ–∫—É—â–µ–µ FSM: {await state.get_state()}")
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890.")
        logger.error(f"TG ID: {message.from_user.id}, –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")

@router.message(RegistrationState.waiting_for_phone)
async def wrong_input(message: Message):
    logger.error(f"TG ID: {message.from_user.id}, –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +71234567890.")


@router.message(RegistrationState.confirm, F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def process_confirm(message: Message, state: FSMContext):
    user_data = await state.get_data()
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await add_user(user_data['name'],
                       user_data['email'],
                       user_data['phone'],
                       message.from_user.id,
                       message.from_user.first_name,
                       message.from_user.last_name,
                       message.from_user.username,
                       message.from_user.language_code,
                       message.from_user.is_premium
                       )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['name'], user_data['email'], user_data['phone']},"
                    f" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
        try:
            await message.bot.send_message(os.getenv('ADMIN_TG_ID'),
                                           text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message.from_user.id}\n"
                                                f"TG username: {message.from_user.username}\n"
                                                f"–î–æ–±–∞–≤–∏–ª—Å—è –≤ —Ç–∞–±–ª–∏—Ü—É 'users'.")
        except Exception as e:
            logger.error(f"TG ID: {message.from_user.id}, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")
    except Exception as e:
        # –õ–æ–≤–∏–º –ª—é–±–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        logger.error(f"TG ID: {message.from_user.id}, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø—Ä–æ–±–ª–µ–º–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return

    # await state.set_state(ViolationFSM.dashboard) # –ó–∞—á–µ–º —ç—Ç–æ —Ç—É—Ç —Å–µ–π—á–∞—Å –¥–µ–ª–∞—Ç—å?
    success_reg_msg = await message.answer(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n",
                                           # reply_markup=build_main_kb(),
                                           reply_markup=ReplyKeyboardRemove(),
                                           )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(success_reg_msg_id=success_reg_msg.message_id)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    await delete_message_after_delay(message.from_user.id, success_reg_msg, delay=5)

    what_can_you_do_now = await message.answer(text="–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ üëá",
                                               reply_markup=reg_users_dashboard(),
                                               )
    await state.update_data(what_can_you_do_now_id=what_can_you_do_now.message_id)
    # await state.clear() # –≠—Ç–æ –ª–∏—à–Ω–µ–µ, –µ—Å–ª–∏ —Å—Ä–∞–∑—É –∑–∞–¥–∞–≤–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ViolationFSM.dashboard)
    logger.debug(f"TG ID: {message.from_user.id}, —Ç–µ–∫—É—â–µ–µ FSM: {await state.get_state()}")

@router.message(RegistrationState.confirm, F.text == "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
async def start_again(message: Message, state: FSMContext):
    await state.clear()
    await state.set_state(RegistrationState.waiting_for_name)
    await message.answer(f"–°–æ–æ–±—â–∏—Ç–µ –º–Ω–µ —Å–≤–æ—ë –∏–º—è üëá",
                         reply_markup=ReplyKeyboardRemove())
    logger.debug(f"TG ID: {message.from_user.id}, —Ç–µ–∫—É—â–µ–µ FSM: {await state.get_state()}")

@router.message(RegistrationState.confirm)
async def wrong_input(message: Message, state: FSMContext):
    logger.error(f"TG ID: {message.from_user.id}, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–Ω–æ–ø–∫–∞–º.")
    await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏–ª–∏\n"
                        "–Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ",
                        # reply_markup=finish_reg_keyboard,
                        )
    logger.debug(f"TG ID: {message.from_user.id}, —Ç–µ–∫—É—â–µ–µ FSM: {await state.get_state()}")
