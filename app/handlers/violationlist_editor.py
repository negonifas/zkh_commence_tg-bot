# from aiogram import Router, F, types
# from aiogram.fsm.context import FSMContext
# from aiogram.types import CallbackQuery
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# from aiogram.fsm.state import StatesGroup, State
#
# from app.db.postgresql import get_user_violations_list, get_violations_info_by_id, update_violation_status
# from app.functions.message_deleter import delete_messages_by_names, delete_messages_by_id
# from app.kb.user_reg_kb import reg_users_dashboard
# from app.kb.violationlist_editor_kb import change_violationstatus_button
# # from aiogram.utils.keyboard import InlineKeyboardBuilder
# # from aiogram.filters.callback_data import CallbackData
#
# router = Router(name=__name__)
#
#
# class ViolationListEditorStates(StatesGroup):
#     violations_list = State()
#     violation_details = State()
#     violation_photo_confirm = State()
#
#
# @router.callback_query(F.data == "violationlist_editor")
# async def editor_welcome_message(callback: CallbackQuery, state: FSMContext):
#     await state.set_state(ViolationListEditorStates.violations_list)
#     user_tg_id = callback.from_user.id
#     violations = await get_user_violations_list(user_tg_id)
#     print(f"your violations: {violations}")
#
#     if violations:
#         # message_text = "–í–∞—à–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è:\n\n"
#         message_text = "\n\n"
#         message_ids = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è message_id
#
#         for violation in violations:
#             violation_id, violation_type, addition_date, short_address, status = violation
#
#             # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è
#             message_text += (
#                 f"–¢–∏–ø: {violation_type}\n"
#                 f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {addition_date}\n"
#                 f"–ê–¥—Ä–µ—Å: {short_address}\n"
#                 # f"–°—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {'‚ùå –ù–ï–¢' if status == 1 else '‚úÖ –î–ê'}\n"
#                 f"–°—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: ‚ùå –ù–ï–¢\n"
#             )
#
#             # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
#             # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
#             change_status_button = InlineKeyboardButton(
#                 text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
#                 callback_data=f"change_status_{violation_id}"
#             )
#
#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ message_ids
#             # sent_message = await callback.message.answer(message_text, reply_markup=inline_kb)
#             sent_message = await callback.message.answer(message_text,
#                                                          reply_markup=change_violationstatus_button(violation_id))
#             message_ids.append(sent_message.message_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id
#
#             # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è
#             message_text = ""
#
#         # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ message_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
#         await state.update_data(violation_message_ids=message_ids)
#
#     else:
#         await callback.message.answer(text="–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Ä—É—à–µ–Ω–∏–π.",
#                                       reply_markup=reg_users_dashboard(),)
#
#     await callback.answer()
#
#     # data = await state.get_data()
#     # violation_message_ids = data.get("violation_message_ids")
#     # print("–°–ø–∏—Å–æ–∫ violation_message_ids:", violation_message_ids)
#
#     await state.set_state(ViolationListEditorStates.violation_details)
#
#
# # #----------------------------------------------------------------------------
#
# @router.callback_query(F.data.startswith("change_status_"),
#                        ViolationListEditorStates.violation_details)
# async def change_status_handler(callback_query: CallbackQuery, state: FSMContext):
#     # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏–∑ callback_data
#     violation_id = callback_query.data.split("_")[2]  # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç—å –ø–æ—Å–ª–µ "change_status_"
#
#     # await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è ID: {violation_id}")
#
#     violations_info_by_id = await get_violations_info_by_id(violation_id)
#     violation_id, violation_type, addition_date, short_address, status = violations_info_by_id
#     await callback_query.message.answer(
#                                         f"–¢–∏–ø: {violation_type}\n"
#                                         f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {addition_date}\n"
#                                         f"–ê–¥—Ä–µ—Å: {short_address}\n"
#                                         f"–°—Ç–∞—Ç—É—Å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è: {'‚ùå –ù–ï–¢' if status == 1 else '‚úÖ –î–ê'}\n"
#                                         f"üëá–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
#                                         )
#
#     data = await state.get_data()
#     # await delete_messages_by_names(state,
#     #                                "your_violations_list_msg_id", )
#     violation_message_ids = data.get("violation_message_ids")
#     print("\n–°–ø–∏—Å–æ–∫ violation_message_ids:", violation_message_ids, "\n")
#     for violation_message_id in violation_message_ids:
#         await delete_messages_by_id(state, violation_message_id)
#
#     await state.update_data(violation_id=violation_id)
#     await state.set_state(ViolationListEditorStates.violation_photo_confirm)
#
#
# @router.message(ViolationListEditorStates.violation_details)
# async def violation_details_wrong_input(message: types.Message, state: FSMContext):
#     data = await state.get_data()
#     violation_message_ids = data.get("violation_message_ids")
#     wrong_input_after_violation_details = await message.answer(
#         text="–ù–∞–¥–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
#         reply_markup=reg_users_dashboard()
#     )
#     await state.update_data(wrong_input_after_violation_details_msg_id=wrong_input_after_violation_details.message_id)
#     for violation_message_id in violation_message_ids:
#         await delete_messages_by_id(state, violation_message_id)
#
#
# @router.message(ViolationListEditorStates.violation_photo_confirm, F.photo)
# async def violation_photo_confirm(message: types.Message, state: FSMContext):
#     viaolation_id = (await state.get_data()).get("violation_id")
#     print(f"viaolation_id: {viaolation_id}")
#     await update_violation_status(viaolation_id, 2)
#     await state.clear()
#     violation_photo_confirm_success = await message.answer(
#         text="–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n"
#              "–°—Ç–∞—Ç—É—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω—ë–Ω."
#              "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
#         reply_markup=reg_users_dashboard()
#     )
#
#
# @router.message(ViolationListEditorStates.violation_photo_confirm)
# async def wrong_input(message: types.Message, state: FSMContext):
#     await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
